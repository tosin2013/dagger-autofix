package main

import (
	"context"
	"fmt"
	"os"
	"testing"

	"github.com/sirupsen/logrus"
)

// DemoMCPPRIntegration demonstrates how the MCP integration works with PR operations
func DemoMCPPRIntegration() {
	// Initialize logger
	logger := logrus.New()
	logger.SetLevel(logrus.InfoLevel)

	// Check if MCP is enabled
	mcpEnabled := os.Getenv("MCP_ENABLED") == "true"

	var githubClient GitHubClient

	if mcpEnabled {
		fmt.Println("‚úÖ MCP mode enabled - would use MCP GitHub client for PR operations")

		// In a real scenario, you would initialize MCP client:
		// mcpConfig := &MCPConfig{
		//     ServerCommand: []string{"npx", "-y", "@github/github-mcp-server"},
		//     ServerEnv: map[string]string{
		//         "GITHUB_TOKEN": os.Getenv("GITHUB_TOKEN"),
		//         "REPO_OWNER":   os.Getenv("REPO_OWNER"),
		//         "REPO_NAME":    os.Getenv("REPO_NAME"),
		//     },
		// }
		// mcpClient, err := NewMCPGitHubClient(mcpConfig, logger)
		// if err == nil {
		//     githubClient = mcpClient
		// }
		fmt.Println("   (MCP client initialization skipped for example)")
	} else {
		fmt.Println("‚úÖ Direct GitHub API mode - would use direct GitHub client for PR operations")

		// In a real scenario, you would initialize GitHub client:
		// ctx := context.Background()
		// token := dag.SetSecret("github-token", os.Getenv("GITHUB_TOKEN"))
		// directClient, err := NewGitHubIntegration(ctx, token, os.Getenv("REPO_OWNER"), os.Getenv("REPO_NAME"))
		// if err == nil {
		//     githubClient = directClient
		// }
		fmt.Println("   (Direct client initialization skipped for example)")
	}

	// Demonstrate that the PR engine accepts any GitHubClient implementation
	// (Using a mock for demonstration purposes)
	if githubClient == nil {
		// Use mock for demonstration
		fmt.Println("üìù Using mock client for demonstration")
		githubClient = &mockGitHubClientDemo{}
	}

	// Create PR engine - works with both MCP and direct clients!
	prEngine := NewPullRequestEngine(githubClient, logger)
	fmt.Printf("‚úÖ PR engine created successfully with client type: %T\n", githubClient)
	
	// Verify the PR engine is properly initialized
	_ = prEngine // Use the variable to avoid compilation error

	// Example data structures for PR creation
	analysis := &FailureAnalysisResult{
		ID: "example-001",
		Classification: FailureClassification{
			Category:   "test_failure",
			Confidence: 0.95,
		},
		RootCause:   "Missing test coverage",
		Description: "Tests are failing due to insufficient coverage",
	}

	fix := &FixValidationResult{
		Valid: true,
		Fix: &ProposedFix{
			ID:          "fix-001",
			Description: "Add missing test cases",
			Type:        TestFix,
			Changes: []CodeChange{
				{
					FilePath:    "example_test.go",
					Operation:   "modify",
					Explanation: "Added test cases for edge conditions",
				},
			},
		},
		TestResult: &TestResult{
			Success:  true,
			Coverage: 95.5,
		},
	}

	fmt.Println("\nüìã Example PR creation workflow:")
	fmt.Printf("   Analysis: %s (Confidence: %.1f%%)\n", analysis.RootCause, analysis.Classification.Confidence*100)
	fmt.Printf("   Fix: %s\n", fix.Fix.Description)
	fmt.Printf("   Test Coverage: %.1f%%\n", fix.TestResult.Coverage)
	
	// In a real workflow, you would call:
	// prOptions := &PRCreationOptions{
	//     BranchName:   "autofix/example-test-fix",
	//     TargetBranch: "main", 
	//     Title:        "[AutoFix] Add missing test coverage",
	//     Body:         "Auto-generated PR for test coverage improvement",
	//     Labels:       []string{"automated", "test-fix"},
	//     Draft:        true,
	// }
	// pr, err := githubClient.CreatePullRequest(ctx, prOptions)

	fmt.Println("\nüéØ Key Integration Points Verified:")
	fmt.Println("   ‚úÖ PR engine accepts GitHubClient interface")
	fmt.Println("   ‚úÖ Both MCP and direct GitHub clients implement the interface")
	fmt.Println("   ‚úÖ Unified API for PR operations regardless of client type")
	fmt.Println("   ‚úÖ Type safety maintained through Go interfaces")
	
	fmt.Println("\nüöÄ Integration Complete!")
	fmt.Println("   The PR engine now works seamlessly with both:")
	fmt.Println("   ‚Ä¢ MCP GitHub client (via Model Context Protocol)")
	fmt.Println("   ‚Ä¢ Direct GitHub API client (via go-github library)")
}

// mockGitHubClientDemo is a minimal mock for demonstration purposes
type mockGitHubClientDemo struct{}

func (m *mockGitHubClientDemo) GetWorkflowRun(ctx context.Context, runID int64) (*WorkflowRun, error) {
	return nil, nil
}

func (m *mockGitHubClientDemo) GetWorkflowLogs(ctx context.Context, runID int64) (*WorkflowLogs, error) {
	return nil, nil
}

func (m *mockGitHubClientDemo) GetFailedWorkflowRuns(ctx context.Context) ([]*WorkflowRun, error) {
	return nil, nil
}

func (m *mockGitHubClientDemo) CreateTestBranch(ctx context.Context, branchName string, changes []CodeChange) (func(), error) {
	return func() {}, nil
}

func (m *mockGitHubClientDemo) CreatePullRequest(ctx context.Context, options *PRCreationOptions) (*PullRequest, error) {
	return &PullRequest{Number: 123, Title: "Mock PR", State: "open"}, nil
}

func (m *mockGitHubClientDemo) UpdatePullRequest(ctx context.Context, prNumber int, updates *PRUpdateOptions) (*PullRequest, error) {
	return &PullRequest{Number: prNumber, Title: "Updated Mock PR", State: "open"}, nil
}

func (m *mockGitHubClientDemo) GetPullRequest(ctx context.Context, prNumber int) (*PullRequest, error) {
	return &PullRequest{Number: prNumber, Title: "Mock PR", State: "open"}, nil
}

func (m *mockGitHubClientDemo) ClosePullRequest(ctx context.Context, prNumber int) error {
	return nil
}

func (m *mockGitHubClientDemo) AddPullRequestComment(ctx context.Context, prNumber int, comment string) error {
	return nil
}

func (m *mockGitHubClientDemo) GetRepoOwner() string {
	return "demo-owner"
}

func (m *mockGitHubClientDemo) GetRepoName() string {
	return "demo-repo"
}

func TestExampleMCPPRIntegration(t *testing.T) {
	// This test demonstrates the MCP PR integration
	// It doesn't require actual GitHub credentials
	DemoMCPPRIntegration()
}